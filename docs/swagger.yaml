basePath: /api
definitions:
  auth.LoginDTO:
    description: Login credentials
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: secureP@ssw0rd
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginSuccessResponseDTO:
    description: Response structure for successful login requests
    properties:
      data:
        $ref: '#/definitions/auth.TokenResponseDTO'
      success:
        type: boolean
    type: object
  auth.RefreshTokenDTO:
    description: Refresh token request data
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshTokenSuccessResponseDTO:
    description: Response structure for successful token refresh requests
    properties:
      data:
        $ref: '#/definitions/auth.TokenResponseDTO'
      success:
        type: boolean
    type: object
  auth.RegisterDTO:
    description: Registration data
    properties:
      date_of_birth:
        example: "1990-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      gender:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      password:
        example: secureP@ssw0rd
        minLength: 8
        type: string
      phone_number:
        example: "0975234412"
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  auth.RegisterSuccessResponseDTO:
    description: Response structure for successful registration requests
    properties:
      data:
        $ref: '#/definitions/auth.TokenResponseDTO'
      success:
        type: boolean
    type: object
  auth.TokenResponseDTO:
    description: Token response data
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        description: in seconds
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  auth.VerifyEmailDTO:
    properties:
      code:
        example: "123456"
        maxLength: 6
        minLength: 6
        type: string
    required:
    - code
    type: object
  models.UserResponseDTO:
    description: User information returned in API responses
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      date_of_birth:
        example: "1990-01-01"
        type: string
      deleted_at:
        example: "2023-01-10T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      email_verified:
        example: true
        type: boolean
      first_name:
        example: John
        type: string
      full_name:
        example: John Doe
        type: string
      gender:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      last_login_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      last_name:
        example: Doe
        type: string
      phone_number:
        example: "+12125551234"
        type: string
      status:
        example: 1
        type: integer
      updated_at:
        example: "2023-01-01T12:34:56Z"
        type: string
      verify_email_code:
        example: "123456"
        type: string
    type: object
  user.CreateUserDTO:
    description: Data for creating a new user
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      date_of_birth:
        example: "1990-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      gender:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      password:
        example: secureP@ssw0rd
        minLength: 8
        type: string
      phone_number:
        example: "+12125551234"
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  user.CreateUserSuccessResponseDTO:
    description: Response structure for successful user creation requests
    properties:
      data:
        $ref: '#/definitions/models.UserResponseDTO'
      success:
        type: boolean
    type: object
  user.ListUsersSuccessResponseDTO:
    properties:
      data:
        $ref: '#/definitions/user.PaginatedUsersResponse'
      success:
        type: boolean
    type: object
  user.PaginatedUsersResponse:
    description: Paginated list of users
    properties:
      items:
        items:
          $ref: '#/definitions/models.UserResponseDTO'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total_count:
        example: 42
        type: integer
      total_pages:
        example: 5
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: phongtran11.tt@gmail.com
    name: PhongTran
  description: API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Modular FX Fiber API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return tokens
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginSuccessResponseDTO'
      summary: User login
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.RefreshTokenSuccessResponseDTO'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return tokens
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.RegisterSuccessResponseDTO'
      summary: User registration
      tags:
      - auth
  /auth/register/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email address
      parameters:
      - description: Verification code
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/auth.VerifyEmailDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Verify email
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ListUsersSuccessResponseDTO'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateUserSuccessResponseDTO'
      summary: Create a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
